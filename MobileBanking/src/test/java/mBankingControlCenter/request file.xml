<?xml version="1.0" encoding="UTF-8"?>
<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="HMAC_Implemented_GPRS_TXNS" soapui-version="5.3.0" activeEnvironment="Default" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" id="a6374961-c4c3-4d1d-97a4-7abd0d01bfe4" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:testSuite name="mPAY_NI - All Transaction Set" id="b274118e-48da-4444-a412-3d5ad22094a2"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BalanceEnquiry" searchProperties="true" id="0d63ff15-9eaa-41e4-af0c-481194bfcd4e"><con:settings/><con:testStep type="httprequest" name="BE_SUCCESS" id="cbd17731-7daa-4c92-94b7-eff57f0e4d24"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="BE_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="2a465da3-fad2-47fd-ae97-84cc1f594053" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APBE;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" id="2f0d3810-126a-4980-8b84-817eca058abf" name="Contains"><con:configuration><token>BE00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="0026ab63-5686-4e07-9aff-9d25c30e3d8f"><con:settings/><con:config><script>import groovy.sql.Sql
import java.io.Serializable;
import java.math.BigInteger;
import com.eviware.soapui.support.GroovyUtils;
import oracle.jdbc.pool.OracleDataSource;
import java.sql.Connection

try {
    	if(true) {
        def resultDir = new File("D:\\SOAP RESULTS\\mpay");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, testRunner.testCase.testSuite.name+"_Test_Completion_Reports.csv");
        
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE","TXNID","TXNTYPE","TXNSTATUS","ERRORTYPE","ERRORCODE","ERRORMSG","RESPONSECODE","RESPONSEDESCRIPTION"');
        }

        resultsFile.append('\n');    
        resultsFile.append('"' + testRunner.testCase.name + '",');    
        String status= testRunner.status;
        if(status.equals("FINISHED")){
        	resultsFile.append('"PASSED",');  
        }else{
        	resultsFile.append('"' + testRunner.status + '",');  
        }
       
        resultsFile.append('"');  
            for(result in testRunner.getResults()) {
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');  

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '",');
  
String rawResponse = new String(testRunner.testCase.testSteps['BE_SUCCESS'].testRequest.response.getRawResponseBody())

def txn
if (rawResponse.contains("TXNID"))
{
    def rrn = rawResponse.substring(rawResponse.lastIndexOf("TXNID:") + 6)
    txn=rrn.substring(0,12)
 
/*
       OracleDataSource ods = new OracleDataSource();
        ods.setURL("jdbc:oracle:thin:@//10.144.24.45:1527/ormpypre");
        ods.setUser("VIJAYA_P2TEST");
        ods.setPassword("vijaya_p2test321#");
        Connection sql = ods.getConnection();
 */
     String dbUName =testRunner.testCase.testSuite.getPropertyValue( "dbUName" )
    String dbPwd =testRunner.testCase.testSuite.getPropertyValue( "dbPwd" )
    String dbIp =testRunner.testCase.testSuite.getPropertyValue( "dbIp" )
    String dbPort =testRunner.testCase.testSuite.getPropertyValue( "dbPort" )
    String dbSid = testRunner.testCase.testSuite.getPropertyValue( "dbSid" )
    
      //sql=Sql.newInstance("jdbc:oracle:thin:[VIJAYA_P2TEST/vijaya_p2test321#]@//10.144.24.45:1527/ormpypre") 
   // sql=Sql.newInstance("jdbc:oracle:thin:@10.44.113.15:1527:MOBILEBANK","MPAY_IOB_SIT","temp123#","oracle.jdbc.driver.OracleDriver")
   String Conn = "jdbc:oracle:thin:@"+dbIp+":"+dbPort+":"+dbSid+","+dbUName+","+dbPwd
   log.info(Conn)
  sql=Sql.newInstance(Conn+"dbUName","dbPwd" ,"oracle.jdbc.driver.OracleDriver")
    
    String result = sql.firstRow("select txnauthid, txntype , txnstatus , Error_Type, Errorcode, Error_Msg, Responsecode, Response_Description from Transactionlog WHERE TXNAUTHID =${txn}")

          if(result != null)
          {
                     String[] data = result.split(",")
                     String [] txnauthid=data[0].split("=")
                     String [] txntype =data[1].split("=")
                     String [] txnstatus =data[2].split("=")
                     String [] ErrorType =data[3].split("=")
                     String [] Errorcode =data[4].split("=")
                     String [] ErrorMsg =data[5].split("=")
                     String [] Responsecode =data[6].split("=")
                     String [] ResponseDescription =data[7].split("=")
    
                     resultsFile.append('"' + txnauthid[1] + '",');
                     resultsFile.append('"' + txntype[1] + '",');
                     resultsFile.append('"' + txnstatus[1] + '",');
                     resultsFile.append('"' + ErrorType[1] + '",');
                     resultsFile.append('"' + Errorcode[1] + '",');
                     resultsFile.append('"' + ErrorMsg[1] + '",');
                     resultsFile.append('"' + Responsecode[1] + '",');
                     resultsFile.append('"' + ResponseDescription[1] + '"');
            } 
}


    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}









</script></con:config></con:testStep><con:testStep type="jdbc" name="JDBC Request" id="f75737ce-df60-4d43-b585-3b6ac1379512"><con:settings/><con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:driver>oracle.jdbc.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:VIJAYA_P2TEST/vijaya_p2test321#@]//10.144.24.45[:1527][/ormpypre]</con:connectionString><con:query>select txnauthid, txntype , txnstatus , Error_Type, Errorcode, Error_Msg, Responsecode, Response_Description from Transactionlog</con:query><con:properties/></con:config></con:testStep><con:loadTest id="8ccfde38-5b85-4520-8a1e-5ed4b8dd9c1b" name="BE_1HR"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>3600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:tearDownScript>import groovy.sql.Sql
import java.io.Serializable;
import java.math.BigInteger;
import com.eviware.soapui.support.GroovyUtils;

try {
    //Check a project level property to see if the reports should be produced.
  //  if(context.expand('${#TestCase#ProduceReports}') == 'true') {
    	if(true) {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mpay");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, testRunner.testCase.testSuite.name+"_Test_Completion_Reports.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE","TXNID","TXNTYPE","TXNSTATUS","ERRORTYPE","ERRORCODE","ERRORMSG","RESPONSECODE","RESPONSEDESCRIPTION"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        String status= testRunner.status;
        if(status.equals("FINISHED")){
        	resultsFile.append('"PASSED",');    //Overall Test Case result
        }else{
        	resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result
        }
       

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '",');
        
//method


//def responseHolder = GroovyUtils.getXmlHolder( testRunner.testCase.testSteps[testRunner.testCase.name].testRequest.response.responseContent );

//def responseHolder = groovyUtils.getXmlHolder( testRunner.testCase.testSteps[testRunner.testCase.name].testRequest.response.responseContent );
//jdbc:oracle:thin:@//oracle.hostserver2.mydomain.ca:1522/ABCD

       //sql=Sql.newInstance("jdbc:oracle:thin:@//10.144.24.45:1527/ormpypre","VIJAYA_P2TEST","vijaya_p2test321#","oracle.jdbc.driver.OracleDriver")
       sql=Sql.newInstance("jdbc:oracle:thin:@10.44.113.15:1527:MOBILEBANK","MPAY_IOB_SIT","temp123#","oracle.jdbc.driver.OracleDriver")

def RRN= "722111191466"
String result = sql.firstRow("select txnauthid, txntype , txnstatus , Error_Type, Errorcode, Error_Msg, Responsecode, Response_Description from Transactionlog WHERE TXNAUTHID =${RRN}")

    String[] data = result.split(",")
    String [] txnauthid=data[0].split("=")
    String [] txntype =data[1].split("=")
    String [] txnstatus =data[2].split("=")
    String [] ErrorType =data[3].split("=")
    String [] Errorcode =data[4].split("=")
    String [] ErrorMsg =data[5].split("=")
    String [] Responsecode =data[6].split("=")
    String [] ResponseDescription =data[7].split("=")
    
    resultsFile.append('"' + txnauthid[1] + '",');
    resultsFile.append('"' + txntype[1] + '",');
    resultsFile.append('"' + txnstatus[1] + '",');
    resultsFile.append('"' + ErrorType[1] + '",');
    resultsFile.append('"' + Errorcode[1] + '",');
    resultsFile.append('"' + ErrorMsg[1] + '",');
    resultsFile.append('"' + Responsecode[1] + '",');
    resultsFile.append('"' + ResponseDescription[1] + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}









</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Mini Statement" searchProperties="true" id="3b9a54ab-5e00-4d6f-8b96-0237995de11d"><con:settings/><con:testStep type="httprequest" name="MS_SUCCESS" id="a9d4a59e-b48e-4951-b559-e92cd736426e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="MS_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="e76ded26-3236-4d75-a1be-ff2eb0e6948c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APMS;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="fc88cff0-53a5-4c36-9e61-0d5fbe9a8230"><con:configuration><token>MS00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:loadTest id="d749eb22-3192-4313-bb8b-b653b162114f" name="MS_1HR"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>3600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
  //  if(context.expand('${#TestCase#ProduceReports}') == 'true') {
    	if(true) {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mpay");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, testRunner.testCase.testSuite.name+"_Test_Completion_Reports.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE","TXNID","TXNTYPE","TXNSTATUS","ERRORTYPE","ERRORCODE","ERRORMSG","RESPONSECODE","RESPONSEDESCRIPTION"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        String status= testRunner.status;
        if(status.equals("FINISHED")){
        	resultsFile.append('"PASSED",');    //Overall Test Case result
        }else{
        	resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result
        }
       

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT- M2M_QFT" searchProperties="true" id="d45645c7-8b64-494d-98e6-d5121e68c6e7" disabled="true"><con:settings/><con:testStep type="httprequest" name="QFT_SUCCESS" id="4abe5480-0e42-4d5f-a116-16cdb79dc580"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="QFT_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="11c4f903-35d3-417e-a50a-db0fa7629a7c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQM;Y;${#TestSuite#mPIN};${#TestSuite#FT- M2M_QFT- Mobile No};${#TestSuite#Amount}; ;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="dabcf632-18bb-4265-b88e-100ab29de8b6"><con:configuration><token>QM00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:loadTest id="4fe8d948-ff5b-4f4d-9ffb-992d7b813d5b" name="M2M_1HR"><con:settings/><con:threadCount>100</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>3600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2M_Beneficiary Registration" searchProperties="true" id="8d67a406-9ceb-4cc7-a602-bb134e972909" disabled="true"><con:settings/><con:testStep type="httprequest" name="APRM_SUCCESS" id="852936ee-a90c-4125-a38c-47e34c1d2acb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APRM_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="8b546233-888f-4a49-ba8c-5cdd1a995fc7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APRM;N;${#TestSuite#Bank ID};${#TestSuite#FT- M2M_QFT- Mobile No};nick;0001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="c61c693e-da06-432a-b698-aac42f1e0fc8"><con:configuration><token>RM00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="APC1_SUCCESS" id="37bfd677-dbe2-4ab7-af16-01e730cccb95"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APC1_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="88d1015e-c172-46a9-bcfc-82f6462b8a8c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APC1;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#FT- M2M_QFT- Mobile No};nick;021201554550;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="8d7ba701-4648-4858-a89d-3594f17085a5"><con:configuration><token>C100</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2M_Beneficiary Payment" searchProperties="true" id="fb8753e6-8aeb-47b2-927f-06b20032a36c" disabled="true"><con:settings/><con:testStep type="httprequest" name="APF1_SUCCESS" id="6648b513-d76a-4889-a8ea-17bc871ee301"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APF1_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b85c1067-cfc7-46f0-bfcf-2d2d66706713" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APF1;Y;${#TestSuite#mPIN};P;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};;${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="a2114570-345a-49b6-bc12-a41b0626e005"><con:configuration><token>F100</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="APFT_SUCCESS" id="959c1171-aa02-416d-aa5a-63f1c9073ad2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APFT_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="0743db62-4e4c-4428-b71a-26587562563c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APFT;Y;436315117544?${#TestSuite#mPIN};50;Paid;nick;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="b69441c4-47cb-47f2-8a86-ecfe4502fdd8"><con:configuration><token>FT00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2M_Beneficiary Details" searchProperties="true" id="814b97ba-7d9e-4edb-a6a8-0d8b33de86d8" disabled="true"><con:settings/><con:testStep type="httprequest" name="APD5_SUCCESS" id="4dad2ec7-0ec8-4da6-99bf-898b2444c994"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APD5_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3c84fe81-fab4-446c-ac34-d1482454d4d3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APD5;Y;${#TestSuite#mPIN}; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="a03d611c-e7d6-4c1f-8a90-42cee14e4b71"><con:configuration><token>D500</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2M_Ben Deregistration" searchProperties="true" id="25a8179c-c82b-4c97-8a17-d993070b1226" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP2L_SUCCESS" id="d7e94c62-1f9c-4ef9-815d-753b2f01e641"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP2L_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="e589405d-e7c4-40bc-9d22-c9108282085e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP2L;Y;${#TestSuite#mPIN}; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="fb7a2218-facd-463b-a6de-8b5d549e9286"><con:configuration><token>2L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP2D_SUCCESS" id="180964ed-2476-457a-9fa4-198260488834"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP2D_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="db987907-6428-4858-ad8d-b3471ee16788" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP2D;Y;${#TestSuite#mPIN};nick;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};;${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="5f034141-d6a1-41b6-a888-6178ef7e1c61"><con:configuration><token>2D00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2A_QFT" searchProperties="true" id="ca813346-d095-44be-8246-c74699fb8093" disabled="true"><con:settings/><con:testStep type="httprequest" name="QFT_SUCCESS" id="1b2c2bc4-6e1d-4e64-bead-4eb3dbe0a063"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="QFT_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="0e089279-f894-4862-84af-5901bbc0b751" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQT;Y;${#TestSuite#mPIN};${#TestSuite#FT - M2M_Acc No};SA;100;paid;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="441d89ba-4aa0-4e03-9b4b-54a6e2e45cff"><con:configuration><token>QT00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:loadTest id="cb516ac5-69d4-4173-b0a6-0c0229b11aec" name="M2A_1HR"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>3600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2A_Beneficiary Registration" searchProperties="true" id="ae756783-768c-4d54-8f01-2906cda5ddf8" disabled="true"><con:settings/><con:testStep type="httprequest" name="APRA_SUCCESS" id="53ac8f03-bc6a-42c7-af12-67e0c29c6853"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APRA_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="abf4e768-e867-4f0b-8408-62bc5ba7c5d1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APRA;N;${#TestSuite#Bank ID};${#TestSuite#FT - M2M_Acc No};SA;gopi;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="d7524a14-03a2-42f8-829c-740ed9dddee5"><con:configuration><token>RA00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="APC2_SUCCESS" id="e4665449-e761-4efc-8860-054e91f01b1a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APC2_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="c06f77ce-139e-4728-92a2-815d1edae009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APC2;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#Acc no};SA;gopi;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="033c78ea-3c6b-44dc-8fbf-aacde9f9c9b5"><con:configuration><token>C200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2A_Beneficiary Payment" searchProperties="true" id="cc034712-9e8c-456a-9cf2-06da17e0cd81" disabled="true"><con:settings/><con:testStep type="httprequest" name="APF2_SUCCESS" id="8de38b96-5a56-4806-8fc7-d34debfbeb68"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APF2_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="4651fb8b-1262-498c-a3cd-f80eee4350f0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APF2;N;P;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="6868ae1c-98dd-4b6f-bbad-5385fd6d312a"><con:configuration><token>F200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="APFA_SUCCESS" id="16c6d52d-9ea0-4e40-a07d-511f169f48b7"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APFA_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="4ed6c839-3847-43e6-bdf0-f6083ce56d70" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APFA;Y;${#TestSuite#mPIN};100; ;gopi;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="aaff2aad-37e4-4168-94fc-7ceb5227406f"><con:configuration><token>FA00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2A_Beneficiary Details" searchProperties="true" id="9b290ae5-69ed-4214-990d-7ecab90a8f1c" disabled="true"><con:settings/><con:testStep type="httprequest" name="APD6_SUCCESS" id="62cb5e27-c676-47e4-a41c-eef08aa4246e"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APD6_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="de2599e6-1e5b-41ac-93c6-43487d89b09f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APD6;Y;${#TestSuite#mPIN}; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="68c8f94e-9123-4633-b808-8ad7474dc69d"><con:configuration><token>D600</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FT - M2A_Ben Deregistration" searchProperties="true" id="3da47079-9a7f-4117-b566-8384877794d7" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP3L_SUCCESS" id="bb6ff62e-afe1-409a-bda5-4511a10f4e72"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP3L_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="61288bae-7301-480b-85c5-c3c09e9d9359" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP3L;N; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="f0904fb8-85b8-4dd2-b0b2-08eb951c75eb"><con:configuration><token>3L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP3D_SUCCESS" id="9cbd2666-b53b-401d-ace4-74c69fcff0d9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP3D_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="28be05be-2047-4569-b8c2-208d54e8aead" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP3D;Y;${#TestSuite#mPIN};gopi;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="287082e5-e58f-4d7b-816a-6dfffe7832e7"><con:configuration><token>3D00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NEFT_QFT" searchProperties="true" id="bf5c3b1d-46fb-4fdb-aaed-5938f505a6c2" disabled="true"><con:settings/><con:testStep type="httprequest" name="QFT_SUCCESS" id="38fc2d08-42af-4a5c-b343-fcc663a84c1a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="QFT_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="1c2c7f53-1986-431d-98f3-4a382c3a00bb" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQN;Y;${#TestSuite#mPIN};${#TestSuite#FT - M2M_Acc No};SA;${#TestSuite#NEFT - QFT - IFSC};100;paid;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="878e5796-95f8-457c-8908-f76608fc7706"><con:configuration><token>QN00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:loadTest id="d63530a2-53ea-4f97-9510-4970b9c84a95" name="NEFT_1HR"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>3600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NEFT_Beneficiary Registration" searchProperties="true" id="a0163798-83a8-4f4b-95f9-f38a7ca7b2c5" disabled="true"><con:settings/><con:testStep type="httprequest" name="APQ2_SUCCESS" id="12adac81-80d9-4ba8-a28f-fa8d7ae2a307"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APQ2_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f7214afd-1ca6-44a4-8a32-754f06d8e5c0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQ2;N;${#TestSuite#FT - M2M_Acc No};SA;${#TestSuite#NEFT - QFT - IFSC};ben;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="06571fe2-9ead-42b2-823c-a2d01b196cf5"><con:configuration><token>Q200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="APQ3_SUCCESS" id="41132839-66d4-4200-948f-b6bcaef67d37"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APQ3_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="bf108e73-2e40-4bf2-bfa6-360677689459" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQ3;Y;${#TestSuite#mPIN};${#TestSuite#FT - M2M_Acc No};SA;${#TestSuite#NEFT - QFT - IFSC};ben;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="1146cdcb-8be5-47b9-b27a-a2bbc8b81d75"><con:configuration><token>Q300</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NEFT_Beneficiary Payment" searchProperties="true" id="b9f18d32-57bc-4d0e-9ef0-bfaaa5d86648" disabled="true"><con:settings/><con:testStep type="httprequest" name="APQ7_SUCCESS" id="69d8c1c8-3636-4e21-af1d-ef8cc4f69ded"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APQ7_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="a1bd6f2d-25ed-4968-bc88-b78fdb079256" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding/><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQ7;N;P;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="8cf372b0-31ec-4981-b589-eb100d07d0be"><con:configuration><token>Q700</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="APQ8_SUCCESS" id="4123241c-bf5d-420a-8bb1-e78fd129b41a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APQ8_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f1ef1c22-1a87-4b0b-8471-a967ea841db6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQ8;Y;${#TestSuite#mPIN};100;paid;ben;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="17f2ded5-a899-4a03-8ea3-eca8924234b1"><con:configuration><token>Q800</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NEFT_Beneficiary Details" searchProperties="true" id="573644b2-7aca-4312-bc1f-fe00c5ca70dd" disabled="true"><con:settings/><con:testStep type="httprequest" name="APNL_SUCCESS" id="aea0b146-2b8e-4a13-914a-609c7b77c22b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APNL_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="7bfb6969-c5ec-4b33-ab63-42733f452258" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APNL;Y;${#TestSuite#mPIN}; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="41d42230-cb76-41bb-959c-e729ed42710f"><con:configuration><token>NL00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NEFT_Ben Deregistration" searchProperties="true" id="ca8198f4-9d0d-4128-aa76-9c2157551ec1" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP4L_SUCCESS" id="dc44f88c-a841-4aab-9b54-3a966876d22a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP4L_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f2c5bc16-646c-4b8d-bbcc-7599eadefa6c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP4L;N; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="616b2c47-d82d-4b51-87f4-414819cb6018"><con:configuration><token>4L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP4D_SUCCESS" id="3ddbcf28-78a7-4c6f-b4b1-9b4bfdedb472"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP4D_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="131ebce9-ee6b-49ce-a48d-91da07b3c42c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP4D;Y;${#TestSuite#mPIN};ben;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="e5860eec-eff3-43cd-867c-c399b793c98e"><con:configuration><token>4D00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate MMID" searchProperties="true" id="b1238039-ee6d-4bda-8736-40fd49df471d" disabled="true"><con:settings/><con:testStep type="httprequest" name="Generate MMID" id="f9550c5e-0f59-434d-947f-cfbe35a6b3c1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Generate MMID" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="25e66e0c-ef16-4694-a13d-e23693a71e4d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APIM;Y;${#TestSuite#mPIN};001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="25e5a495-0e93-4796-b9d9-151c278685a9"><con:configuration><token>IM00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Quick P2P" searchProperties="true" id="82bf181e-386e-49e4-a0a4-8be6b87522cf" disabled="true"><con:settings/><con:testStep type="httprequest" name="APQI_SUCCESS" id="79a1943c-87b3-4ddc-b17a-67dc2329a0e1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APQI_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="65acbcda-3875-4fbb-b758-3cbc932cb131" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APQI;Y;${#TestSuite#mPIN};${#TestSuite#Quick - P2P Mobile No};${#TestSuite#Quick - P2P MMID};100; ;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="2f439452-da76-461e-9a50-0e760d1ce4e6"><con:configuration><token>QI00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:loadTest id="9b6cf4a7-353e-41bd-bfa6-4edfe51b1705" name="P2P_1HR"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>3600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Quick_P2A" searchProperties="true" id="08efe9fc-de11-4a0d-83b4-ce46922ff372" disabled="true"><con:settings/><con:testStep type="httprequest" name="P2A_SUCCESS" id="40d8445f-c3cf-4444-aa87-2ce330943962"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="P2A_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="fab756c9-7c18-4a5f-9b41-debfb367c84a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APK1;Y;${#TestSuite#mPIN};${#TestSuite#Quick - P2A Acc No};SA;${#TestSuite#NEFT - QFT - IFSC};100;amt paid;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=(long)(Math.random() * 100000000 * 100000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="cfa863f5-c8ef-4fd8-b17b-1dd964d5795e"><con:configuration><token>K100</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:loadTest id="e16c394a-bb89-41f6-9eb6-a65faf37f5ed" name="P2A_1HR"><con:settings/><con:threadCount>10</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>3600</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>100</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Quick_P2M" searchProperties="true" id="37f548f3-e851-44e3-be3a-3b71da476ff2" disabled="true"><con:settings/><con:testStep type="httprequest" name="APPI_SUCCESS" id="5560af08-9b74-4301-b516-a71a1766ee7a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APPI_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="8d512900-f24d-4304-b1d4-9fde6ac0b247" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APPI;Y;${#TestSuite#mPIN};9619578842;9012445;100;ref123;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="ae52cb55-0de9-4ea5-9581-47b04fd95ef5"><con:configuration><token>PI00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Quick_P2U" searchProperties="true" id="2bbc6cf7-a2aa-4a91-a8be-979213e062ef" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP1U_SUCCESS" id="34c189db-a8df-4c01-a8a8-f09500571f35"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP1U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b5153333-1053-4481-93a4-6785759e0277" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP1U;Y;${#TestSuite#mPIN};288866441998871;-;100; ;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};24140100001239;${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="0ba27ac3-d7ea-457b-8239-a9665d88ddd5"><con:configuration><token>1U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Generate OTP" searchProperties="true" id="c49fe02a-e970-4116-8bc2-aa6041dfc08e" disabled="true"><con:settings/><con:testStep type="httprequest" name="OTP Gen_SUCCESS" id="7c653c62-e1de-4d08-ba88-f3f718cb81e8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="OTP Gen_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b00e2c52-f506-44be-9e81-be2183eacf47" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APMO;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="69d39054-5e65-4540-8647-9f320564dd4e"><con:configuration><token>MO00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2P_Beneficiary Registration" searchProperties="true" id="5187d328-66fc-4725-8ce0-520b913d9537" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Reg APW1_SUCCESS" id="1d16b1b8-971a-44e8-b8b0-6c1e08ab355d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg APW1_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="7e3b41da-8ecb-4950-beee-37ff225faac5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APW1;N;${#TestSuite#P2P-Ben Reg MMID};${#TestSuite#P2P-Ben Reg Mob No};shiv;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="098bc88e-ade7-4249-bc12-97c689f28208"><con:configuration><token>W100</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Reg APW2_SUCCESS" id="30afc12b-127e-471f-93a8-c757731fc8d1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg APW2_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f3a185c7-6d8e-4ce2-ae8f-89acba4a8a88" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APW2;Y;${#TestSuite#mPIN};${#TestSuite#P2P-Ben Reg MMID};${#TestSuite#P2P-Ben Reg Mob No};shiv;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="b8876e44-9c70-4303-bd5f-44168b1324c3"><con:configuration><token>W200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>Mobile No</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID </con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>53171094557846513918387703502396856568</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2P_Beneficiary Payment" searchProperties="true" id="6d3bab6f-86dc-4a89-9309-3d7ef16d85b9" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Pay APW3_SUCCESS" id="0d51b41d-cc08-43a6-9e7d-7f6ceaa74ddf"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay APW3_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="36612076-443f-4a3f-9290-137816f47417" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APW3;N;P; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="4552643f-b636-446f-b5ab-a35044dc3220"><con:configuration><token>W300</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Pay APW4_SUCCESS" id="8ae51068-a251-4d30-9296-1b3202ef1d67"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay APW4_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f9b011f8-535d-486c-9bad-f16d5defe2f7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APW4;Y;${#TestSuite#mPIN};1000; ;shiv;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="8fcc1ae8-37d1-4040-bcda-98c68d357215"><con:configuration><token>W400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>Mobile No</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID </con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>53171094557846513918387703502396856568</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2P_Beneficiary Details" searchProperties="true" id="b1e0fa0c-95c8-4d73-a53b-d4791a27d3d8" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Details APD9_SUCCESS" id="fde8eae7-0920-47c6-9cfb-91e877c3b5cb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Details APD9_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="43aa7be3-0329-452a-ac99-6b7f01ba7dae" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APD9;Y;${#TestSuite#mPIN};shiv;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="a5141d4c-d783-4d41-90a3-3c8c4722fe93"><con:configuration><token>D900</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>Mobile No</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID </con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>53171094557846513918387703502396856568</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>rue</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2P_Beneficiary Deregistration" searchProperties="true" id="f6eb2521-5d49-4708-8b3f-c9420909ac22" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Dereg_AP5L SUCCESS" id="53411824-58f4-4693-baeb-a42a4e41fc27"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg_AP5L SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="0ea6c710-1cf7-4512-8e93-0a6409ef864a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP5L;N;shiv;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="ab2f61d8-0c5f-4700-9a5f-e76bee9d8176"><con:configuration><token>5L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Dereg AP5D_SUCCESS" id="214d98b9-137c-47ea-8357-6dd4f37fe08c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg AP5D_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="a99b02a0-d0fd-43cd-8d57-a69f48d75e6b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP5D;Y;${#TestSuite#mPIN};shiv;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="4bb114bf-c9ef-4f2a-9fc8-e71eb3470c84"><con:configuration><token>5D00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>Mobile No</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID </con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>53171094557846513918387703502396856568</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2A_Beneficiary Registration" searchProperties="true" id="ec63dce6-e2b0-4205-942e-82cdfc431ae2" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Reg APK2_SUCCESS" id="ac7f0776-f13c-42e7-a921-0cf7dc7ff110"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg APK2_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="568c19bf-09e0-4358-a7d1-0394a5f15ea3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APK2;N;24140100009814;SA;${#TestSuite#NEFT - QFT - IFSC};shar;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="e72424b9-fe27-48d0-8e26-5b55863b4f8c"><con:configuration><token>K200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Reg APK3_SUCCESS" id="8c6b13bb-5408-4c21-986e-4a9070798461"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg APK3_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f0bd97c3-6154-414d-9b83-1c409ad08d46" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APK3;Y;${#TestSuite#mPIN};24140100009814;SA;${#TestSuite#NEFT - QFT - IFSC};shar;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="ce2e9691-de80-4f35-ad21-0d341a3e05d1"><con:configuration><token>K300</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2A_Beneficiary Payment" searchProperties="true" id="c6ebf439-4925-4831-bc2d-e7a27c032cac" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Pay APK4_SUCCESS" id="c0751534-eb05-4696-a5dc-5b31299594d3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay APK4_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="7d8405f5-cc71-4b46-9122-426d6ca664e7" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APK4;N;shar;1;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="b1376204-259c-415a-a1fe-91f6acb15320"><con:configuration><token>K400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Pay APK5_SUCCESS" id="781aa702-a882-41a3-ae38-781190734a90"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay APK5_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="462776d4-9062-4488-874b-66ba48fec342" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APK5;Y;${#TestSuite#mPIN};shar;100;paid;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="538212e3-e153-4675-a94c-5d2b0cdaaf4d"><con:configuration><token>K500</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2A_Beneficiary Details" searchProperties="true" id="befe9600-3e86-4da3-8d07-0b42cd7f137c" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Details AP4W_SUCCESS" id="2c012df8-5c75-46aa-ab7a-b1cd43875c78"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Details AP4W_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f599f473-9338-4206-8d2a-b502584e49f4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP4W;Y;${#TestSuite#mPIN};shar;1;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="b914b88b-ba3a-4eea-abd0-a2bfdd681003"><con:configuration><token>4W00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2A_Beneficiary Deregistration" searchProperties="true" id="12703be2-3d33-4731-a2ee-2fcea9f056b8" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Dereg AP6L_SUCCESS" id="a3909b6b-73bf-42cd-b95a-b94e5d9aba77"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg AP6L_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b748d9c4-6d3d-4939-b918-593df1998853" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP6L;N;shar;1;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="760419eb-955a-40b5-a7c2-2ec94173c5b1"><con:configuration><token>6L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Dereg AP6D_SUCCESS" id="dd0ab564-ea6d-4f53-b673-9d8a9d91cfa8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg AP6D_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d2dbaa98-60d9-4e30-868f-f544aad995d2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP6D;Y;${#TestSuite#mPIN};shar;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="e762ee25-e348-4981-9296-9118ad50c218"><con:configuration><token>6D00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2M_Beneficiary Registration" searchProperties="true" id="77407a05-57a6-480a-8fa9-1ecd9bc3791a" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Reg  AP1I_SUCCESS" id="bf552c64-2291-4fa7-8b07-7fd2d501ee84"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg  AP1I_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="592c19ee-a999-457b-999d-f844f769b7b0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP1I;N;9012445;9619578842;rama;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="6fede1d4-97cc-4938-9e6d-5fbc771e9133"><con:configuration><token>1I00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Reg AP2I_SUCCESS" id="f4c58fe9-a7fe-4ff4-a7ae-928620948540"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg AP2I_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="7132a33a-581b-4170-95c1-462f36b06e0f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP2I;Y;${#TestSuite#mPIN};9012445;9619578842;rama;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="4ac6ec66-dc2a-46f7-91f3-ea472a1db0d3"><con:configuration><token>2I00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>MobileNo</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID</con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>16839916302326761512459214465291903202</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2M_Beneficiary Payment" searchProperties="true" id="c518910f-3027-4c5d-8765-690f95f400bc" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Pay AP3I_SUCCESS" id="cd4e1b32-334b-4341-8512-9bf5525f96f4"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay AP3I_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b909f575-b8b5-44da-b303-31e2e28d4b8b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP3I;N;rama;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="fe46022c-da2d-42b9-85b6-7215815b0cce"><con:configuration><token>3I00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Pay APPM_SUCCESS" id="6643c67d-1063-40d4-8476-59cd393deff8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay APPM_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="432ed284-d98b-43be-a950-9e1a2d76a0f1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APPM;Y;${#TestSuite#mPIN};100;ref234;rama;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="cdff64df-a718-472c-9de5-f74062501172"><con:configuration><token>PM00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>MobileNo</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID</con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>16839916302326761512459214465291903202</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2M_Beneficiary Details" searchProperties="true" id="a47916fc-28ea-497a-907d-62d2a33d88fa" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Details APM9_SUCCESS" id="d8505c3c-ce1a-4e1b-8fbc-81eb244a7238"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Details APM9_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="7c5836a6-b120-4128-b8b3-af97cebbf643" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APM9;Y;${#TestSuite#mPIN};rama;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="e00b0b2c-1aa5-4b84-964a-0279ccdd7757"><con:configuration><token>M900</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>MobileNo</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID</con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>16839916302326761512459214465291903202</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2M_Beneficiary Derregistration" searchProperties="true" id="2a33bee1-afad-4593-bf90-0c77aa14e85e" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Dereg AP7L_SUCCESS" id="52c82b1b-63b0-4314-b240-66f72a3daa89"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg AP7L_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="bba40808-2676-4a51-ac09-760b7b2c8306" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP7L;N;rama;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="dad689bc-f9d4-4cc6-a166-ed293a2a8e57"><con:configuration><token>7L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Dereg AP7D_SUCCESS" id="400b0ac6-53b0-4c1e-b218-33e49e616872"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg AP7D_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="116b186d-78c1-4228-b822-e8edd480f2f9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP7D;Y;${#TestSuite#mPIN};rama;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="cc5abeed-369d-47dd-a050-e33324d21ba6"><con:configuration><token>7D00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>MobileNo</con:name><con:value>9842798393</con:value></con:property><con:property><con:name>Bank ID</con:name><con:value>444444</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>16839916302326761512459214465291903202</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2U_Beneficiary Registration" searchProperties="true" id="88738d9c-d167-4c53-8f5b-60496d184e33" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Reg AP2U_SUCCESS" id="8359bf96-8ed2-47fa-8571-906974aecffd"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg AP2U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f6cb4491-9379-4aba-9132-d36c1bade25a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP2U;N;294649494946;-;jil;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="5f70f070-a62b-4488-b9d5-c3d4bde4c3f5"><con:configuration><token>2U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Reg AP3U_SUCCESS" id="e3dd599e-cdd5-4ebc-adc1-f41d7cdc8ba8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Reg AP3U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="e14420a7-9bf7-4681-9b73-241774ceaf8c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP3U;Y;${#TestSuite#mPIN};294649494946;SA;jil;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="42e6183b-b768-455d-b097-243ea210ffd3"><con:configuration><token>3U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2U_Beneficiary Payment" searchProperties="true" id="1d9269ab-4423-4254-8cd2-b07217d3aeb3" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Pay AP4U_SUCCESS" id="047747cd-7646-44da-b274-0ef54c9986ce"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay AP4U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f1a18a32-57b5-4fc7-8c23-cb0af86fce5f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP4U;N;jil;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="f2c3a6dd-31ef-45d2-a489-642e795115ca"><con:configuration><token>4U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Pay AP5U_SUCCESS" id="db9fc568-2a70-4474-bbf5-e49363909a7d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Pay AP5U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="144fffc6-73ce-40cf-84cf-af493134f775" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP5U;Y;${#TestSuite#mPIN};jil;100;paif;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="3fe4044b-7ba5-4f96-bea5-ee3d786e8849"><con:configuration><token>5U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2U_Beneficiary Details" searchProperties="true" id="65f3f605-7bf9-4dea-ae7e-1c9c3a0d93fd" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Details AP6U_SUCCESS" id="c194a6df-972b-41b7-9468-6eb9ba3aeed0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Details AP6U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="c1f80b55-8b0f-4462-ad8f-139cc37221ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP6U;Y;${#TestSuite#mPIN}; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="82e3fb0b-db18-4425-b2d1-58d435b238db"><con:configuration><token>6U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reg IMPS_P2U_Beneficiary Deregistration" searchProperties="true" id="5372a698-d615-47b2-b399-1595dfb2c284" disabled="true"><con:settings/><con:testStep type="httprequest" name="Ben Dereg AP7U_SUCCESS" id="b096fc2a-b13d-415b-9dec-628d25f5e888"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg AP7U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="7a23ac1f-19b9-47af-b10c-f6b448583e9f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP7U;N; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="e1154041-3dce-46fd-9dbb-5306a33c32e2"><con:configuration><token>7U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Ben Dereg AP8U_SUCCESS" id="32f31302-9e77-4335-b6f6-92827edc09bb"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Ben Dereg AP8U_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="90c6870a-97b1-4459-b4a6-253f9e4eab60" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP8U;Y;${#TestSuite#mPIN};jil;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="1c59e4fb-32fe-4c15-be8d-377afcd3d444"><con:configuration><token>8U00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Cancel MMID" searchProperties="true" id="1c7a8b78-8edd-4e1c-becd-d3fc320b6510" disabled="true"><con:settings/><con:testStep type="httprequest" name="Single A/c_SUCCESS" id="807cefb5-6a04-4a31-a659-5289b8f29742"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Single A/c_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="c43a152d-d916-4f11-98ee-907e46101779" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APRC;Y;${#TestSuite#mPIN};${#TestSuite#Acc no};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="c369a051-46db-46aa-ae8a-1594e7a35335"><con:configuration><token>RC00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Generate MMID" id="0c46e5ab-961d-4c2e-bd60-603c64041993"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Generate MMID" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b6b42abb-6c91-4dda-ae23-cdd768708a61" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APIM;Y;${#TestSuite#mPIN};001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="b2a6651a-d5f4-457d-85ee-08dab98c11cc"><con:configuration><token>IM00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="All Accounts_SUCCESS" id="9125a6a7-38af-4520-a84a-f08787f19f08"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="All Accounts_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="5fa3b9e3-c084-45b6-9d68-c2eed4d4e10c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APRC;Y;${#TestSuite#mPIN};ALL;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="22e7b8e5-525b-413f-8f0e-fa16861bdcdf"><con:configuration><token>RC00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Account Fetch" searchProperties="true" id="389e3a85-59e1-4c76-aaca-1b4cd84149c8" disabled="true"><con:settings/><con:testStep type="httprequest" name="APSY_SUCCESS" id="78687fae-36dc-4867-a2fb-61594073b403"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APSY_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3ebf2ce3-d922-4097-a332-f1b6a5d5531f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APSY;0001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="5bd4ec1e-85db-4579-bcf0-347c0eb68a4e"><con:configuration><token>SY00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Recharge_New Recharge" searchProperties="true" id="332776af-b284-42b3-b93c-4038a06a0341" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP1T_SUCCESS" id="9ad788b7-f2f0-4a3b-b9dc-642adb00b276"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP1T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="00785913-524b-4e32-9734-97381b6ff3b8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP1T;N;0001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="a73cf536-9a99-42e8-b045-8e5d0837ddd8"><con:configuration><token>1T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP2T_SUCCESS" id="a4335fa6-9be2-41b9-801d-2beb4c07caa2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP2T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="78ee1c9c-9a64-460a-9958-b8bb6c29ae11" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file">D:/SOAPUI/RRN_Fetch.csv</con:setting><con:setting id="discardResponse">false</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP2T;N;MTP;ai;MTP;0001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="cefb6f29-8e29-4ed2-960f-aff9c869b312"><con:configuration><token>2T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Fetch RRN" id="7fd189b3-a365-4776-99b5-094fe305bdc6"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
int trimsize = 26
def csvFilePath = "D:/SOAPUI/RRN_Fetch.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()
for(int i =0;  i &lt; rowsize;  i++)
{
    rowdata = rowsData[i]
    String[] data = rowdata.split(";")

int length=data.toString().length();

int start = length - 26;
int end = start + 12;

String txnid = data.toString().substring(start,end);

testRunner.testCase.testSuite.setPropertyValue( "RRN", txnid)
}</script></con:config></con:testStep><con:testStep type="httprequest" name="AP3T_SUCCESS" id="a155244d-3f7a-4ed7-8a1e-ddee00ecbdc0"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP3T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="5b617da0-bc9a-4fe7-b6d0-406b6639b5c1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP3T;N;MTP;AIRCELMOB;O;MTP;${#TestSuite#Recharge_MobileNo}:100:${#TestSuite#Recharge_Nickname}${=(int)(Math.random() * 100)};${#TestSuite#RRN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=(int)(Math.random() * 10000000000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="e964238d-5797-4424-86f4-b480a0854297"><con:configuration><token>3T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP5T_SUCCESS" id="44746fe6-24a6-40e1-a24f-f848b463b8cf"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP5T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="e95231ba-70a7-43d6-8085-7e5ecc47512f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP5T;Y;${#TestSuite#mPIN};O;AIRCELMOB;MTP;${#TestSuite#Recharge_MobileNo}:100:${#TestSuite#Recharge_Nickname};${#TestSuite#RRN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="5e559d41-0656-47fa-a19e-32e7eb013142"><con:configuration><token>5T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP7T_SUCCESS" id="baaa2e5e-8b17-4616-ac68-4ae2512f5e17"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP7T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="115ea9d9-3fc8-446c-9aa6-a7d1eee0b5ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP7T;Y;${#TestSuite#mPIN};MTP;${#TestSuite#RRN};1;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="89e28260-05f3-4513-a6b4-9dadfa4b7844"><con:configuration><token>7T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property><con:property><con:name>Recharge_MobileNo</con:name><con:value>4950000003</con:value></con:property><con:property><con:name>Recharge_Nickname</con:name><con:value>Nickname</con:value></con:property><con:property><con:name>Donation_Entity Name</con:name><con:value>SAITRUST</con:value></con:property><con:property><con:name>Donation_Scheme Name</con:name><con:value>TrustDonate</con:value></con:property><con:property><con:name>Donation_Sub Scheme Name</con:name><con:value>donatecat1</con:value></con:property><con:property><con:name>Donation_Sub Scheme Flag</con:name><con:value>Y</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Recharge_Through Nickname" searchProperties="true" id="eb017753-c8ff-4624-94c5-4f9036d46532" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP8T_SUCCESS" id="c57304c7-b2cb-42f5-9838-5d56316a13a1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP8T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="6d10d251-ff19-4239-b73d-c6bafcfadd39" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP8T;Y;${#TestSuite#mPIN};MTP;1;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="f6571029-8d7d-4fc4-8364-e8167cdde34f"><con:configuration><token>8T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP4T_SUCCESS" id="c4978caa-d0ae-4618-9d62-b1cb9ce3eee2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP4T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="9b618b37-2376-4bd8-883d-741c8acb7975" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file">D:/SOAPUI/RRN_Fetch.csv</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@max-size">0</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP4T;N;MTP;${#TestSuite#Recharge_Nickname};N;MTP;100;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="442ca137-47ee-46ce-bc5f-4417ec20c34f"><con:configuration><token>4T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Fetch RRN" id="ebc8a560-c26d-432d-a437-5a5b5fad2ce0"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
int trimsize = 26
def csvFilePath = "D:/SOAPUI/RRN_Fetch.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()
for(int i =0;  i &lt; rowsize;  i++)
{
    rowdata = rowsData[i]
    String[] data = rowdata.split(";")

int length=data.toString().length();

int start = length - 26;
int end = start + 12;

String txnid = data.toString().substring(start,end);

testRunner.testCase.testSuite.setPropertyValue( "RRN", txnid)
}</script></con:config></con:testStep><con:testStep type="httprequest" name="AP5T_SUCCESS" id="004c8b3d-ea41-46e5-8ad9-c3f65dea5854"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP5T_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="08f8df24-fe27-4c93-ae83-2645a362822b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP5T;Y;${#TestSuite#mPIN};N;${#TestSuite#Recharge_Nickname};MTP;100;${#TestSuite#RRN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="7d1efb38-dcbb-41d0-8137-7fe87306477b"><con:configuration><token>5T00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Temple Donation" searchProperties="true" id="d6e63c97-1bd5-48c8-b196-9bec38c85c59" disabled="true"><con:settings/><con:testStep type="httprequest" name="Entity Fetch_APT1" id="bd12ceb4-30c4-4106-abbb-7bf987a09e1c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Entity Fetch_APT1" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="fbeade71-2f9d-4279-a372-465420a286f6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APT1;N; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="79a061bf-7653-4a91-9ec4-29094c099f66"><con:configuration><token>T100</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Scheme Fetch_APT2" id="ebb0889b-9a39-488d-8607-64316e7043fa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Scheme Fetch_APT2" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="dc689078-2746-4a93-ab7a-0ce3d5c2160e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APT2;N;${#TestSuite#Donation_Entity Name};001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="41868f92-4ccb-4a21-81fa-53f9bc117fb6"><con:configuration><token>T200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Sub Scheme Fetch_APT3" id="3c5c6e20-ee05-4772-9fc4-ea7b72f29a54"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Sub Scheme Fetch_APT3" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3726e7ae-5a24-4460-8db2-ef8871e3fb7f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APT3;N;${#TestSuite#Donation_Entity Name};${#TestSuite#Donation_Scheme Name};001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="c6324834-6cc0-48d5-ab23-f79f2307f2f5"><con:configuration><token>T300</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Confirmation_APT4" id="34757b01-2934-46fd-9a1c-534b91e929fe"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Confirmation_APT4" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="62d1ca54-b7d1-47e7-b6ff-c637beacf94b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file">D:/SOAPUI/RRN_Fetch.csv</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@max-size">100</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APT4;N;${#TestSuite#Donation_Entity Name};Y;${#TestSuite#Donation_Scheme Name};${#TestSuite#Donation_Sub Scheme Flag};${#TestSuite#Donation_Sub Scheme Name};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" id="91801fa0-451a-4cf1-82de-6763c8a4d59a"><con:configuration><token>T400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Fetch RRN" id="cc495281-19a9-49f4-957e-7de53c11a808"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
int trimsize = 26
def csvFilePath = "D:/SOAPUI/RRN_Fetch.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()
for(int i =0;  i &lt; rowsize;  i++)
{
    rowdata = rowsData[i]
    String[] data = rowdata.split(";")

int length=data.toString().length();

int start = length - 26;
int end = start + 12;

String txnid = data.toString().substring(start,end);

testRunner.testCase.testSuite.setPropertyValue( "RRN", txnid)
}</script></con:config></con:testStep><con:testStep type="httprequest" name="Payment_APT5" id="58b8bbb1-8fd9-41bb-a400-1e360c09d902"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Payment_APT5" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="74c9faf8-adac-45f3-b0a7-076ae9a4e35d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APT5;N;${#TestSuite#Donation_Entity Name};Y;${#TestSuite#Donation_Scheme Name};Y;${#TestSuite#Donation_Sub Scheme Name};100;${#TestSuite#RRN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}</con:request><con:assertion type="Simple Contains" name="Contains" id="fbe205c8-a89b-4e55-99e3-333b919b7f50"><con:configuration><token>T500</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Registered Bill Pay - Biller Registration" searchProperties="true" id="94dd0dae-ed0a-4537-963e-16210c1138b7" disabled="true"><con:settings/><con:testStep type="httprequest" name="Category Fetch_APB2" id="76f8f1a7-8c62-4699-9b6b-94f955fee1e3"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Category Fetch_APB2" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="d696cd34-afc6-48a5-8876-d141aec37706" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APB2;Y;${#TestSuite#mPIN};P;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="52a464d3-16c3-4ce8-9410-b60825725f1d"><con:configuration><token>B200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Biller Fetch_APB9" id="9e36c15b-fb7d-4f2c-9aa3-4d97e1f26e3c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Biller Fetch_APB9" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="03e2186c-9c62-4387-82eb-c35f5e7163d2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APB9;Y;${#TestSuite#mPIN};INSURANCE; ; ;P;0001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="18aed292-daec-467f-a461-2ab69ec7bdf8"><con:configuration><token>B900</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Add Biller_APB3" id="6920d48b-ba5d-4a05-a82a-267053732523"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Add Biller_APB3" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="af2f0ac3-b150-403b-b139-958487049a03" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APB3;Y;${#TestSuite#mPIN};000000000026;P;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="2f70b109-0d11-4bff-ab74-f6343526ec37"><con:configuration><token>B300</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Confirmation_APB4" id="ffeb0e53-c760-4f4e-b7fd-6668a7d6141a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Confirmation_APB4" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b8ccd1dc-b0c7-4812-af26-2d386053edb8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APB4;Y;${#TestSuite#mPIN};000000000026;MAX NEW YORK LIFE INSURANCE;2;234241211:20061991;nick;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="f225f6e3-110b-4f01-8d84-4e74ea3e87f9"><con:configuration><token>B400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Registered Bill Pay - Bill Payment" searchProperties="true" id="6a4d9d9a-4468-4d71-9c57-e4d71f12d4cc" disabled="true"><con:settings/><con:testStep type="httprequest" name="Fetch biller_APBX" id="8fa4cdb6-32a4-4eba-88c7-de284c2cc106"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Fetch biller_APBX" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="5a93ebcd-8535-4db7-94e4-71ee62e906ed" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APBX;Y;${#TestSuite#mPIN};001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="5f876b20-775a-4cfa-824a-36eedf29b056"><con:configuration><token>BX00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Biller Details_APBW" id="6ab050cb-2bd2-4993-8173-06bbdd0ca0ed"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Biller Details_APBW" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="ad86f14e-f691-462d-be88-a1b216defd3b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APBW;Y;${#TestSuite#mPIN};nick;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="6b0f8302-5e5f-4cd6-b9da-39dab170c226"><con:configuration><token>BW00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Bill Presentment_AP1B" id="6a66eb37-5ff1-423b-ad88-5b5c80be369a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Bill Presentment_AP1B" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="27fb374c-af50-4f6f-a4c1-44178b606236" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file">D:/SOAPUI/RRN_Fetch.csv</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP1B;Y;${#TestSuite#mPIN};A;nick;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="6bd59937-a9e1-40d5-aa2d-7d3a50645956"><con:configuration><token>1B00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Fetch RRN" id="790a0625-3c8b-453e-9b55-b25b05f163a5"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
int trimsize = 26
def csvFilePath = "D:/SOAPUI/RRN_Fetch.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()
for(int i =0;  i &lt; rowsize;  i++)
{
    rowdata = rowsData[i]
    String[] data = rowdata.split(";")

int length=data.toString().length();

int start = length - 26;
int end = start + 12;

String txnid = data.toString().substring(start,end);

testRunner.testCase.testSuite.setPropertyValue( "RRN", txnid)
}</script></con:config></con:testStep><con:testStep type="httprequest" name="Payment_APB6" id="1d3f41d0-ab1a-450e-9f0c-74f29ef58804"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Payment_APB6" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="e10e0430-1db0-4222-90bc-5eeb27be7235" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APB6;Y;${#TestSuite#mPIN};nick;F;5044821053000059;1000;${#TestSuite#RRN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="ba3f70d2-94e5-4548-b828-217e038ceb6b"><con:configuration><token>B600</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Registered Bill Pay - Biller Deregistration" searchProperties="true" id="143daaa5-810e-40ec-91b0-6fd63a021f0d" disabled="true"><con:settings/><con:testStep type="httprequest" name="Biller Fetch_APBZ" id="8ebfc4a4-d3f6-414f-a825-96aea3e6aeb2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Biller Fetch_APBZ" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="17006eaa-3d5f-4b9e-a7c2-785f715e76c5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APBZ;Y;${#TestSuite#mPIN};001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="35c164cc-352d-4862-b530-b5b64ff2d12c"><con:configuration><token>BZ00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Deregistration_APBY" id="c4168b72-ac90-4b17-9b93-0e3806c1b7b8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Deregistration_APBY" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="19b4a440-5b65-4e8b-a518-8330cc388e0c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APBY;Y;${#TestSuite#mPIN};nick;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="a0cb3b78-62ca-42af-88a4-cdfdb52ff7dc"><con:configuration><token>BY00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Adhoc Bill Payment" searchProperties="true" id="d1baa10b-77ad-4bcd-9938-70b22f0cdef6" disabled="true"><con:settings/><con:testStep type="httprequest" name="Category Fetch_APB2" id="1a31abcb-c908-4749-b641-102d44d5cc06"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Category Fetch_APB2" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="dcd9776c-b47f-473b-932a-fcf0af3a230d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APB2;Y;${#TestSuite#mPIN};A;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="abf71eef-928e-425d-a973-d0be5f0c53c3"><con:configuration><token>B200</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Biller Fetch_APDW" id="28243b4d-c53e-4a10-9bad-bae217cb85d8"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Biller Fetch_APDW" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="8f403492-5191-4c90-8717-77763ccac9ec" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APDW;Y;${#TestSuite#mPIN};INSURANCE; ; ;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="1060a2c3-14ee-4ebd-b475-8d58c0f2af80"><con:configuration><token>DW00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="Biller Details_APDT" id="176fc96c-61b3-42a2-a7bf-55aa19cc373c"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Biller Details_APDT" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="9ef9b58a-94c3-47f7-a5bc-8c01007a013c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file">D:/SOAPUI/RRN_Fetch.csv</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APDT;Y;${#TestSuite#mPIN};000000000457;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="ec49474e-cc80-4ad9-9188-58d5fadf955d"><con:configuration><token>DT00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="groovy" name="Fetch RRN" id="b1597207-37eb-4753-8ae1-62d89c3bf209"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
int trimsize = 26
def csvFilePath = "D:/SOAPUI/RRN_Fetch.csv"
context.fileReader = new BufferedReader(new FileReader(csvFilePath))

rowsData = context.fileReader.readLines()
int rowsize = rowsData.size()
for(int i =0;  i &lt; rowsize;  i++)
{
    rowdata = rowsData[i]
    String[] data = rowdata.split(";")

int length=data.toString().length();

int start = length - 26;
int end = start + 12;

String txnid = data.toString().substring(start,end);

testRunner.testCase.testSuite.setPropertyValue( "RRN", txnid)
}</script></con:config></con:testStep><con:testStep type="httprequest" name="Payment_APDM" id="79821ee9-7368-47cd-8f62-a8c73529d786"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="Payment_APDM" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f2babf3e-cb2d-4a6b-af3b-02afacbd4646" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APDM;Y;${#TestSuite#mPIN};000000000457;N;${#TestSuite#DUKPT};100;${#TestSuite#RRN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}
</con:request><con:assertion type="Simple Contains" name="Contains" id="9ca83110-6000-4557-b927-f30be0c286d0"><con:configuration><token>DM00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Request for Cheque Book" searchProperties="true" id="286f0d64-b031-4a32-8a9b-a9b3d16072ed" disabled="true"><con:settings/><con:testStep type="httprequest" name="APL1_SUCCESS" id="c4fa88ae-9ca3-489c-a0ab-d6ff2fb5c260"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APL1_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="112a4420-3516-4fe2-a81e-c888c144fd48" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APL1;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="5870f632-7fe5-4992-9c62-80f60c5b332b"><con:configuration><token>L100</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Request for A/c Statement" searchProperties="true" id="91664218-63b5-4b8e-bd8d-0e41c2c56e89" disabled="true"><con:settings/><con:testStep type="httprequest" name="APL3_SUCCESS" id="d04cf679-556e-4de7-8a95-7a7164c35f02"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APL3_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b5f0ac8d-5244-4d1d-9676-e154e7e15496" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APL3;Y;${#TestSuite#mPIN};20/12/2014;20/12/2014;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="6610a38c-f57f-425f-9124-af64a3ea3442"><con:configuration><token>L300</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Request for Loan" searchProperties="true" id="235d1ca3-34d7-4f0a-9c22-177f9415c58a" disabled="true"><con:settings/><con:testStep type="httprequest" name="APL7_SUCCESS" id="c971f971-6730-4972-ae05-efb78a4274fa"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APL7_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="827a6990-6e88-49a8-8cab-0a209eddd4ab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APL7;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="0b7c342a-5713-4644-a5dd-7dd83a35d1b2"><con:configuration><token>L700</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Request for Credit Card" searchProperties="true" id="1326cda6-3e9f-41f2-a198-fe3918b9efe1" disabled="true"><con:settings/><con:testStep type="httprequest" name="APL8_SUCCESS" id="596775a9-119a-4da3-bfed-dd136e8cf11a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APL8_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="c4177c35-1f19-4f15-87ba-17f9b5fb6d9d" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APL8;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="d3711c60-c87c-48b5-a3c6-d9bd389f10fe"><con:configuration><token>L800</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Request for New Account" searchProperties="true" id="2c42c339-b462-45cd-b071-3f4405c2d2c6" disabled="true"><con:settings/><con:testStep type="httprequest" name="APL6_SUCCESS" id="35e84fb2-f56a-4bee-a5c9-9223db3ca9ab"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APL6_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="4ddbb0da-55db-4735-ba99-e384bb67f5de" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APL6;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="e8fdc658-81c0-42a6-b105-365219e53814"><con:configuration><token>L600</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Stop Cheque" searchProperties="true" id="3246c5a9-a3b9-4913-90fc-5b0b82117a9e" disabled="true"><con:settings/><con:testStep type="httprequest" name="APL4_SUCCESS" id="80eab1bb-c712-4e42-9f5c-b990b70dca3a"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APL4_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="94d3a402-d2eb-46e5-a229-28bf7d96f905" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APL4;Y;${#TestSuite#mPIN};${#TestSuite#Cheque No};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="a5b73c3c-47ba-4eb8-b7fc-aaac8e3ebbe4"><con:configuration><token>L400</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Cheque Status" searchProperties="true" id="f8783613-7c93-4a8c-9684-54641e032624" disabled="true"><con:settings/><con:testStep type="httprequest" name="APLW_SUCCESS" id="13ae4075-6c07-4db2-9601-7d5ea576852d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APLW_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="3528e415-18bf-4992-9ed3-4e03707388dc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APLW;Y;${#TestSuite#mPIN};${#TestSuite#Cheque No};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="5b1153a9-4c78-47e1-94ee-0ad4d1ebe3d7"><con:configuration><token>LW00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Transaction History" searchProperties="true" id="c8f65800-ebec-4c1b-a6b9-91403968cc5a" disabled="true"><con:settings/><con:testStep type="httprequest" name="APTH_SUCCESS" id="4090927b-2ae2-45a7-9c3b-4a970d794ce5"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APTH_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="a7724f0b-f631-42d1-8091-dd9e626c8dc8" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APTH;Y;${#TestSuite#mPIN};001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="20f15930-bfbf-4de1-9a72-34cdad47b431"><con:configuration><token>TH00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ATM Locator" searchProperties="true" id="eb8dc32d-4069-47b5-84da-c42ac95e7389" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP1L_SUCCESS [Pincode]" id="58c5c2b4-9618-48f5-b38b-3ed3b17cd493"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP1L_SUCCESS [Pincode]" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="99e64c1d-2c97-4335-9583-9d233668174e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP1L;N;P;${#TestSuite#ATM Pincode};;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="51c08219-68f0-4803-811f-798d50338896"><con:configuration><token>1L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP1L_SUCCESS [Location]" id="67b548c4-e43d-4fc5-84df-18de3de44152"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP1L_SUCCESS [Location]" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="597e852f-9a2e-4e74-8af1-f710b27879ab" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP1L;N;L;${#TestSuite#ATM Location};;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="7954a028-31cc-4353-9ad2-08682bb209c8"><con:configuration><token>1L00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BranchLocator" searchProperties="true" id="e9507f5e-f29d-4f4a-881f-6223d5de6042" disabled="true"><con:settings/><con:testStep type="httprequest" name="APAL_SUCCESS [Pincode]" id="5bdcfff7-f190-4858-822d-726fc5043c55"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APAL_SUCCESS [Pincode]" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="a97a033c-7c94-405c-ba64-8b6fe53aa04c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APAL;N;P;${#TestSuite#Branch Pincode};;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="b0cbb72e-ae8b-48d9-acfc-23e9ab4f2ba4"><con:configuration><token>AL00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="APAL_SUCCESS [Location]" id="70b30efb-4f96-443c-ac36-c57a5b4416c2"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APAL_SUCCESS [Location]" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="5d4de642-b6b6-4a8b-9f03-c4e39c8eeb8a" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APAL;N;L;${#TestSuite#Branch Location};;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="fc99e696-4035-4f96-a83f-a006c75c5d74"><con:configuration><token>AL00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Loan Calculator" searchProperties="true" id="a41f6e16-6e57-4283-a31a-024c825e2e71" disabled="true"><con:settings/><con:testStep type="httprequest" name="APLR_SUCCESS" id="fe2cc174-db59-414e-a4e2-c200155c0a00"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APLR_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="2e492076-3b5d-489c-a1cd-01610a29c675" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APLR;N;150000;14.50;60;0;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;{=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="652768b6-601e-48a8-b7d3-22f8841cca0f"><con:configuration><token>LR00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="New Account Opening" searchProperties="true" id="e135b904-0533-43f9-bfcd-e65da6f39bbf" disabled="true"><con:settings/><con:testStep type="httprequest" name="APAG_SUCCESS" id="2a9cb551-2cb8-4991-8edb-9d0c9b41f69d"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APAG_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b5ed65d9-d576-41cf-8deb-c132b2fea036" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APAG;Y;${#TestSuite#mPIN};${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="506098b5-feca-4a69-980b-ad0ea629c8c4"><con:configuration><token>AG00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Refer a Friend" searchProperties="true" id="de8136a8-0f0f-4100-9720-277c771995f0" disabled="true"><con:settings/><con:testStep type="httprequest" name="APZ5_SUCCESS" id="5d003db2-b777-4911-8169-9aeadbcb976b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="APZ5_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="c7394efb-ba96-47a4-9d96-f6837417702e" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}APZ5;N;ram;ramasankaris@fss.co.in;9842798563;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="01b971da-5eb0-45e1-9852-ab837dd68847"><con:configuration><token>Z500</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Feedback" searchProperties="true" id="762c96d2-ee2b-4e7b-ba2e-882019adf7ef" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP1F_SUCCESS" id="41b300f3-5595-4469-b7af-cf1fbd8872f9"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP1F_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="9f87adae-cc8d-4dca-8810-4f0bb64685ca" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP1F;N;001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="3a19569b-07d7-4c58-aa40-e762e25363d0"><con:configuration><token>1F00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP2F_SUCCESS" id="15f05de5-c6e8-4dc6-b831-e0b9e16aac1f"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP2F_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="f1e8347a-8c0e-45e1-b1f9-c67e4970cab2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP2F;N;22*1#23*2#24*3;good;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};${#TestSuite#Acc no};${=Math.floor(Math.random() * 1000000)}


</con:request><con:assertion type="Simple Contains" name="Contains" id="955a837b-dc76-49aa-b268-0d41fe11d1df"><con:configuration><token>2F00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Offers" searchProperties="true" id="85cb17b7-479a-428e-98ba-1b6412fab2f3" disabled="true"><con:settings/><con:testStep type="httprequest" name="AP3O_SUCCESS" id="2d94feef-ec0d-4174-b49a-9f47aa7c1df1"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP3O_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="1cf75b41-ebe2-48b8-a749-9f9fc3e99953" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP3O;N;${#TestSuite#Offer Delivery Channel};0001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="bd7f82cf-f1bc-4a5f-8366-3043516904ae"><con:configuration><token>3O00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP4O_SUCCESS" id="8930176e-40f8-4714-8f68-4f2f48d2683b"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP4O_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="e9c6f3d1-8026-429f-baef-3967098dac78" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP4O;N;${#TestSuite#Offer Delivery Channel};${#TestSuite#Offer Previlege};0001;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="0b917a25-e3a5-4aa7-b169-e3eb7c93ec58"><con:configuration><token>4O00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:testStep type="httprequest" name="AP5O_SUCCESS" id="4d91776d-dc61-4b44-8255-25dc30fe3010"><con:settings/><con:config method="POST" xsi:type="con:HttpRequest" name="AP5O_SUCCESS" postQueryString="false" mediaType="application/x-www-form-urlencoded" id="b6383e9b-8819-4079-a264-28da3db91c2c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>${#Project#EndPoint}</con:endpoint><con:request>request=${#TestSuite#MobileNo}AP5O;N;${#TestSuite#Offer Delivery Channel};${#TestSuite#Offer Previlege};3;${#TestSuite#Bank ID};${#TestSuite#DUKPT};${#TestSuite#MessageVersion};0;${=Math.floor(Math.random() * 1000000)}

</con:request><con:assertion type="Simple Contains" name="Contains" id="c566cf66-8f91-4d07-adac-8539f79eff95"><con:configuration><token>5O00</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:config></con:testStep><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:properties><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:properties><con:property><con:name>MobileNo</con:name><con:value>9894060407</con:value></con:property><con:property><con:name>Bank ID</con:name><con:value>403362</con:value></con:property><con:property><con:name>mPIN</con:name><con:value>143728359323132456871830477028309680594</con:value></con:property><con:property><con:name>ProduceReports</con:name><con:value>true</con:value></con:property><con:property><con:name>Acc no</con:name><con:value>1434134124123431</con:value></con:property><con:property><con:name>FT- M2M_QFT- Mobile No</con:name><con:value>9003797602</con:value></con:property><con:property><con:name>Amount</con:name><con:value>10</con:value></con:property><con:property><con:name>FT - M2M_Acc No</con:name><con:value>117910100036987</con:value></con:property><con:property><con:name>NEFT - QFT - IFSC</con:name><con:value>HDFC0000001</con:value></con:property><con:property><con:name>Quick - P2P Mobile No</con:name><con:value>8754599508</con:value></con:property><con:property><con:name>Quick - P2P MMID</con:name><con:value>9012720</con:value></con:property><con:property><con:name>Quick - P2A Acc No</con:name><con:value>24140100009814</con:value></con:property><con:property><con:name>P2P-Ben Reg Mob No</con:name><con:value>8754599508</con:value></con:property><con:property><con:name>P2P-Ben Reg MMID</con:name><con:value>9028016</con:value></con:property><con:property><con:name>Produce Reports</con:name><con:value>true</con:value></con:property><con:property><con:name>DUKPT</con:name><con:value>123457</con:value></con:property><con:property><con:name>Recharge_MobileNo</con:name><con:value>4950000003</con:value></con:property><con:property><con:name>Recharge_Nickname</con:name><con:value>name</con:value></con:property><con:property><con:name>Donation_Entity Name</con:name><con:value>SAIBABA</con:value></con:property><con:property><con:name>Donation_Scheme Name</con:name><con:value>SAI000</con:value></con:property><con:property><con:name>Donation_Sub Scheme Name</con:name><con:value/></con:property><con:property><con:name>Donation_Sub Scheme Flag</con:name><con:value>N</con:value></con:property><con:property><con:name>MessageVersion</con:name><con:value>4.0.5</con:value></con:property><con:property><con:name>Cheque No</con:name><con:value>123456</con:value></con:property><con:property><con:name>ATM Pincode</con:name><con:value>603103</con:value></con:property><con:property><con:name>ATM Location</con:name><con:value>Chennai</con:value></con:property><con:property><con:name>Branch Pincode</con:name><con:value>603103</con:value></con:property><con:property><con:name>Branch Location</con:name><con:value>Chennai</con:value></con:property><con:property><con:name>Offer Delivery Channel</con:name><con:value>CreditCard</con:value></con:property><con:property><con:name>Offer Previlege</con:name><con:value>Shopping</con:value></con:property><con:property><con:name>dbUName</con:name><con:value>MPAY_IOB_SIT</con:value></con:property><con:property><con:name>dbPwd</con:name><con:value>temp123#</con:value></con:property><con:property><con:name>dbIp</con:name><con:value>10.44.113.15</con:value></con:property><con:property><con:name>dbPort</con:name><con:value>1527</con:value></con:property><con:property><con:name>dbSid</con:name><con:value>MOBILEBANK</con:value></con:property></con:properties><con:tearDownScript>try {
    //Check a project level property to see if the reports should be produced.
    if(context.expand('${#TestCase#ProduceReports}') == 'true') {
        //The path and file to persist results
        def resultDir = new File("D:\\SOAP RESULTS\\mPAYPEGDisable");
        if(!resultDir.exists()) {
            resultDir.mkdirs();
        }
        def resultsFile = new File(resultDir, "CSVReport.csv");

        //If the file does not already exist, we want to create it, otherwise we want to append
        if(!resultsFile.exists()) {
            resultsFile.createNewFile();
            //Header values
            resultsFile.write('"NAME","RESULT","MESSAGES","DATE"');
        }

        //Write the result values
        resultsFile.append('\n');    //Newline
        resultsFile.append('"' + testRunner.testCase.name + '",');    //Test Case Name
        resultsFile.append('"' + testRunner.status + '",');    //Overall Test Case result

        //There can be multiple messages, so set up a loop
        resultsFile.append('"');    //Start of messages.
        for(result in testRunner.getResults()) {
            //There can be lots of messages, so limit amount recorded to avoid going over
            //the buffer size for a CSV field
            msgCount = 0;
            for(message in result.getMessages()) {
                msgCount++;
                if(msgCount &lt; 10) {
                    resultsFile.append(message + ';\n');
                }
            }
        }

        resultsFile.append('",');    //End of messages.

        def currentDate = new Date().format("yyyy-MM-dd hh:mm");
        resultsFile.append('"' + currentDate + '"');
    }
} catch(e) {
    log.error("An error occurred: " + e.toString());
}</con:tearDownScript><con:reportParameters/></con:testSuite><con:properties><con:property><con:name>EndPoint</con:name><con:value>http://mobileprd.fssnet.co.in:80/MPAYPORTAL/servlet/MQSender?</con:value></con:property></con:properties><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/><con:authRepository/><con:tags/></con:soapui-project>