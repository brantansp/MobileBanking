<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="5" ignored="0" total="12" passed="7">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="43453" started-at="2018-03-12T12:02:09Z" finished-at="2018-03-12T12:02:52Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="43453" started-at="2018-03-12T12:02:09Z" finished-at="2018-03-12T12:02:52Z">
      <class name="mBankingControlCenter.NonFinancialTransactions">
        <test-method status="PASS" signature="setUp()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="setUp" is-config="true" duration-ms="117" started-at="2018-03-12T17:32:09Z" finished-at="2018-03-12T17:32:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="5" started-at="2018-03-12T17:32:09Z" finished-at="2018-03-12T17:32:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.AccountSync() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="AccountSync()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="AccountSync" duration-ms="3" started-at="2018-03-12T17:32:09Z" finished-at="2018-03-12T17:32:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AccountSync -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:09Z" finished-at="2018-03-12T17:32:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AccountSync status=SUCCESS method=NonFinancialTransactions.AccountSync()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="FAIL" signature="AppLogin()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="AppLogin" duration-ms="4014" started-at="2018-03-12T17:32:09Z" finished-at="2018-03-12T17:32:13Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at org.testng.Assert.assertTrue(Assert.java:51)
	at mBankingUtilityCenter.ExtentManager.assertResponse(ExtentManager.java:84)
	at mBankingControlCenter.NonFinancialTransactions.AppLogin(NonFinancialTransactions.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:776)
	at org.testng.TestRunner.run(TestRunner.java:634)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
	at org.testng.TestNG.runSuites(TestNG.java:1161)
	at org.testng.TestNG.run(TestNG.java:1129)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AppLogin -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:09Z" finished-at="2018-03-12T17:32:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.AppLogin() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="CancelMMIDAll()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="CancelMMIDAll" duration-ms="8857" started-at="2018-03-12T17:32:13Z" finished-at="2018-03-12T17:32:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CancelMMIDAll -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:13Z" finished-at="2018-03-12T17:32:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AppLogin status=FAILURE method=NonFinancialTransactions.AppLogin()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:13Z" finished-at="2018-03-12T17:32:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.CancelMMIDAll() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:22Z" finished-at="2018-03-12T17:32:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CancelMMIDAll status=SUCCESS method=NonFinancialTransactions.CancelMMIDAll()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:22Z" finished-at="2018-03-12T17:32:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.CancelMMIDSingle() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="CancelMMIDSingle()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="CancelMMIDSingle" duration-ms="7433" started-at="2018-03-12T17:32:22Z" finished-at="2018-03-12T17:32:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CancelMMIDSingle -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:29Z" finished-at="2018-03-12T17:32:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CancelMMIDSingle status=SUCCESS method=NonFinancialTransactions.CancelMMIDSingle()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:29Z" finished-at="2018-03-12T17:32:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.ChequeStatus() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="ChequeStatus()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="ChequeStatus" duration-ms="3152" started-at="2018-03-12T17:32:29Z" finished-at="2018-03-12T17:32:32Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at org.testng.Assert.assertTrue(Assert.java:51)
	at mBankingUtilityCenter.ExtentManager.assertResponse(ExtentManager.java:84)
	at mBankingControlCenter.NonFinancialTransactions.ChequeStatus(NonFinancialTransactions.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:776)
	at org.testng.TestRunner.run(TestRunner.java:634)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
	at org.testng.TestNG.runSuites(TestNG.java:1161)
	at org.testng.TestNG.run(TestNG.java:1129)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ChequeStatus -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:32Z" finished-at="2018-03-12T17:32:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ChequeStatus status=FAILURE method=NonFinancialTransactions.ChequeStatus()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:32Z" finished-at="2018-03-12T17:32:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.EmailIDFetch() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="EmailIDFetch()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="EmailIDFetch" duration-ms="2283" started-at="2018-03-12T17:32:32Z" finished-at="2018-03-12T17:32:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EmailIDFetch -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:35Z" finished-at="2018-03-12T17:32:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EmailIDFetch status=SUCCESS method=NonFinancialTransactions.EmailIDFetch()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:35Z" finished-at="2018-03-12T17:32:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.EmailIDUpdate() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="EmailIDUpdate()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="EmailIDUpdate" duration-ms="1526" started-at="2018-03-12T17:32:35Z" finished-at="2018-03-12T17:32:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EmailIDUpdate -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:36Z" finished-at="2018-03-12T17:32:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EmailIDUpdate status=SUCCESS method=NonFinancialTransactions.EmailIDUpdate()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:36Z" finished-at="2018-03-12T17:32:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.GenerateMMID() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="GenerateMMID()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="GenerateMMID" duration-ms="3042" started-at="2018-03-12T17:32:36Z" finished-at="2018-03-12T17:32:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GenerateMMID -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:39Z" finished-at="2018-03-12T17:32:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=GenerateMMID status=SUCCESS method=NonFinancialTransactions.GenerateMMID()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:39Z" finished-at="2018-03-12T17:32:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.MiniStatement() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="MiniStatement()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="MiniStatement" duration-ms="2647" started-at="2018-03-12T17:32:39Z" finished-at="2018-03-12T17:32:42Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at org.testng.Assert.assertTrue(Assert.java:51)
	at mBankingUtilityCenter.ExtentManager.assertResponse(ExtentManager.java:84)
	at mBankingControlCenter.NonFinancialTransactions.MiniStatement(NonFinancialTransactions.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:776)
	at org.testng.TestRunner.run(TestRunner.java:634)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
	at org.testng.TestNG.runSuites(TestNG.java:1161)
	at org.testng.TestNG.run(TestNG.java:1129)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MiniStatement -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:42Z" finished-at="2018-03-12T17:32:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MiniStatement status=FAILURE method=NonFinancialTransactions.MiniStatement()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:42Z" finished-at="2018-03-12T17:32:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.RetrieveMMID() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="RetrieveMMID()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="RetrieveMMID" duration-ms="2091" started-at="2018-03-12T17:32:42Z" finished-at="2018-03-12T17:32:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RetrieveMMID -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:44Z" finished-at="2018-03-12T17:32:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=RetrieveMMID status=SUCCESS method=NonFinancialTransactions.RetrieveMMID()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:44Z" finished-at="2018-03-12T17:32:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.StopCheque() throws java.io.IOException,java.sql.SQLException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="StopCheque()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="StopCheque" duration-ms="2615" started-at="2018-03-12T17:32:44Z" finished-at="2018-03-12T17:32:47Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at org.testng.Assert.assertTrue(Assert.java:51)
	at mBankingUtilityCenter.ExtentManager.assertResponse(ExtentManager.java:84)
	at mBankingControlCenter.NonFinancialTransactions.StopCheque(NonFinancialTransactions.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:776)
	at org.testng.TestRunner.run(TestRunner.java:634)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
	at org.testng.TestNG.runSuites(TestNG.java:1161)
	at org.testng.TestNG.run(TestNG.java:1129)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StopCheque -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="1" started-at="2018-03-12T17:32:47Z" finished-at="2018-03-12T17:32:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=StopCheque status=FAILURE method=NonFinancialTransactions.StopCheque()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="FAIL" signature="balanceEnq()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="balanceEnq" duration-ms="5729" started-at="2018-03-12T17:32:47Z" finished-at="2018-03-12T17:32:52Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:93)
	at org.testng.Assert.failNotEquals(Assert.java:512)
	at org.testng.Assert.assertTrue(Assert.java:41)
	at org.testng.Assert.assertTrue(Assert.java:51)
	at mBankingUtilityCenter.ExtentManager.assertResponse(ExtentManager.java:84)
	at mBankingControlCenter.NonFinancialTransactions.balanceEnq(NonFinancialTransactions.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:877)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1201)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:776)
	at org.testng.TestRunner.run(TestRunner.java:634)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:425)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:420)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:385)
	at org.testng.SuiteRunner.run(SuiteRunner.java:334)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1318)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1243)
	at org.testng.TestNG.runSuites(TestNG.java:1161)
	at org.testng.TestNG.run(TestNG.java:1129)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- balanceEnq -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:47Z" finished-at="2018-03-12T17:32:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void mBankingControlCenter.NonFinancialTransactions.balanceEnq()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="getResult" is-config="true" duration-ms="0" started-at="2018-03-12T17:32:52Z" finished-at="2018-03-12T17:32:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=balanceEnq status=FAILURE method=NonFinancialTransactions.balanceEnq()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endReport()[pri:0, instance:mBankingControlCenter.NonFinancialTransactions@322d26]" name="endReport" is-config="true" duration-ms="229" started-at="2018-03-12T17:32:52Z" finished-at="2018-03-12T17:32:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- mBankingControlCenter.NonFinancialTransactions -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
